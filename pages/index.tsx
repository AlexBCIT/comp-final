import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { formToJSON } from 'axios'
import { useState } from 'react'
import { GetServerSideProps } from 'next'
import { prisma } from '../lib/prisma'
import { useRouter } from 'next/router'

const inter = Inter({ subsets: ['latin'] })

interface FormData {
  title: string
  content: string
  id: string
}

interface Notes {
  notes: {
    id: string
    title: string
    content: string
  }[]
}

export default function Home({ notes }: Notes) {
  const [form, setForm] = useState<FormData>({ title: '', content: '', id: '' })
  const router = useRouter()

  const refreshData = () => {
    router.replace(router.asPath)
  }

  async function create(data: FormData) {
    try {
      fetch('http://localhost:3000/api/create', {
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        },
        method: 'POST'
      }).then(() => {
        if(data.id) {
          deleteNote(data.id)
          setForm({ title: '', content: '', id: '' })
          refreshData()
        } else {
          setForm({ title: '', content: '', id: '' })
          refreshData()
        }
      }
      )
    } catch (error) {
      console.log(error)
    }
  }

  async function deleteNote(id: string) {
    try {
      fetch(`http://localhost:3000/api/note/${id}`, {
        headers: {
          "Content-Type": "application/json"
        },
        method: 'DELETE'
      }).then(() => {
        refreshData()
      })
    } catch (error) {
      console.log(error);
    }
  }

  const handleSubmit = async (data: FormData) => {
    try {
      create(data)
    } catch (error) {
      console.log(error);
    }
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div>
          <h1 className='text-center font-bold text-2xl mt-4'>Notes</h1>
          <form onSubmit={e => {
            e.preventDefault()
            handleSubmit(form)
          }} className='w-auto min-w-[100%] max-w-min mx-auto space-y-6 flex flex-col items-stretch'>
            <input type="text"
              placeholder='Title'
              value={form.title}
              onChange={e => setForm({ ...form, title: e.target.value })}
              className='border-2 rounded border-gray-600 p-1 justify-center'
            />
            <textarea
              placeholder='Content'
              value={form.content}
              onChange={e => setForm({ ...form, content: e.target.value })}
              className='border-2 rounded border-gray-600 p-1 justify-center'
            />
            <button type="submit" className='bg-blue-500 text-white rounded p-1'>ADD +</button>
          </form>
          <div className='w-auto min-w-[150%] max-w-min mt-20 mx-auto space-y-6 flex flex-col items-start'>
            <ul>
              {notes.map(note => (
                <li key={note.id} className='border-b border-gray-600 p-2'>
                  <div className='flex justify-between'>
                  <div className='flex-1'>
                      <h3 className='font-bold'>{note.title}</h3>
                      <h3 className='text-sm'>{note.content}</h3>
                  </div>
                  </div>
                  <div className='flex justify-center mt-5'>
                    <button onClick={() => setForm({title: note.title, content: note.content, id: note.id})} className="bg-blue-500 px-3 text-white rounded mx-2">UPDATE</button>
                    <button onClick={() => deleteNote(note.id)} className="bg-red-500 px-3 text-white rounded mx-2">DELETE</button>
                  </div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async () => {
  const notes = await prisma.note.findMany({
    select: {
      title: true,
      id: true,
      content: true
    }
  })

  return {
    props: {
      notes
    }
  }
}